import { z } from 'zod';
export const jobBoardSchema = z.object({
    id: z.number(),
    root_domain: z.string(),
    domains: z.array(z.string()),
    name: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
});
export const companySchema = z.object({
    id: z.number(),
});
export const questionSchema = z.object({
    id: z.number(),
    title: z.string(),
});
export const resultSchema = z.object({
    id: z.number(),
    outcome: z.string(),
    date: z.string(),
    notes: z.any(),
});
export const userSchema = z.object({
    id: z.number(),
    full_name: z.string(),
});
export const contactSchema = z.object({
    id: z.number().nullish(),
    contact_name: z.string().nullish(),
    contact_email: z.string().nullish(),
    linkedin_url: z.string().nullish(),
    contact_role: z.string().nullish(),
});
export const industrySchema = z.object({
    name: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
});
export const organizationSchema = z.object({
    id: z.number(),
    name: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    trial_type: z.string(),
    api_name: z.string(),
});
export const skillSchema = z.object({
    label: z.string(),
    value: z.number(),
    selected: z.boolean(),
});
export const veryComfortableSchema = z.object({
    label: z.string(),
    value: z.number(),
    selected: z.boolean(),
});
export const result2Schema = z.object({
    status: z.boolean(),
    edly_reason: z.array(z.any()),
    edly_result: z.boolean(),
    leif_reason: z.array(z.any()),
    leif_result: z.boolean(),
    climb_reason: z.array(z.any()),
    climb_result: z.boolean(),
    stride_reason: z.array(z.any()),
    stride_result: z.boolean(),
});
export const pteFlowSchema = z.object({
    completed_at: z.string(),
    financing: z.string(),
    plan: z.string(),
    pricing: z.string(),
    financing_application_completed_date: z.string(),
});
export const industry2Schema = z.object({
    name: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
});
export const organization2Schema = z.object({
    id: z.number(),
    name: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    trial_type: z.string(),
    api_name: z.string(),
});
export const skill2Schema = z.object({
    label: z.string(),
    value: z.number(),
    selected: z.boolean(),
});
export const veryComfortable2Schema = z.object({
    label: z.string(),
    value: z.number(),
    selected: z.boolean(),
});
export const coreAdvisorSchema = z.object({
    id: z.number(),
    full_name: z.string(),
    email: z.string(),
    disabled: z.boolean(),
    avatar: z.string(),
    linkedin: z.string(),
    about: z.any(),
    role: z.string(),
});
export const supportAdvisorSchema = z.object({
    id: z.number(),
    full_name: z.string(),
    email: z.string(),
    disabled: z.boolean(),
    avatar: z.string(),
    linkedin: z.string(),
    about: z.any(),
    role: z.string(),
});
export const jobSearchOwnerSchema = z.object({
    id: z.number(),
    full_name: z.string(),
    email: z.string(),
    disabled: z.boolean(),
    avatar: z.string(),
    linkedin: z.string(),
    about: z.any(),
    role: z.string(),
});
export const organization3Schema = z.object({
    id: z.number(),
    name: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    trial_type: z.string(),
    api_name: z.string(),
});
export const subscriptionTierSchema = z.object({
    slug: z.string(),
    type: z.string(),
    limit_credits: z.boolean(),
    max_credits: z.number(),
});
export const programManagerSchema = z.object({
    full_name: z.any(),
});
export const settingSchema = z.object({
    id: z.number(),
    active: z.boolean(),
    name: z.string(),
});
export const surveyDefaultParamsSchema = z.object({
    user_id: z.number(),
    fellow_email: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    track: z.string(),
    cohort: z.string(),
    mentor_name: z.string(),
});
export const trialOwnerSchema = z.object({
    id: z.number(),
    full_name: z.string(),
    email: z.string(),
    disabled: z.boolean(),
    avatar: z.string(),
    main_mentor: z.boolean(),
});
export const fellow2Schema = z.object({
    id: z.number(),
    full_name: z.string(),
    avatar_url: z.string(),
});
export const creatorSchema = z.object({
    id: z.number().nullish(),
    role: z.string().nullish(),
    avatar_url: z.string().nullish(),
    full_name: z.string(),
});
export const dataSchema = z.object({
    value: z.string(),
});
export const sessionSchema = z.object({
    id: z.number().nullish(),
    topic: z.string().nullish(),
});
export const fellow3Schema = z.object({
    id: z.number(),
    has_finalized_resume: z.boolean(),
    avatar_url: z.string(),
    full_name: z.string(),
});
export const creator2Schema = z.object({
    id: z.number(),
    avatar_url: z.string(),
    full_name: z.string(),
});
export const infractionCategorySchema = z.object({
    label: z.string(),
    value: z.string(),
});
export const industry3Schema = z.object({
    name: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
});
export const organization4Schema = z.object({
    id: z.number(),
    name: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    trial_type: z.string(),
    api_name: z.string(),
});
export const skill3Schema = z.object({
    label: z.string(),
    value: z.number(),
    selected: z.boolean(),
});
export const veryComfortable3Schema = z.object({
    label: z.string(),
    value: z.number(),
    selected: z.boolean(),
});
export const jobBoard2Schema = z.object({
    label: z.string(),
    value: z.number(),
});
export const avatarSchema = z.object({
    url: z.string(),
});
export const attendanceOverridesSchema = z.object({});
export const fsmCallSchema = z.object({
    event_type: z.string(),
    override_count: z.number(),
    override_status: z.string(),
    calculated_status: z.string(),
    override_status_author: z.string(),
});
export const careerKickoffSchema = z.object({
    event_type: z.string(),
    override_count: z.number(),
    scheduled_date: z.string(),
    override_status: z.string(),
    calculated_status: z.string(),
    override_status_author: z.string(),
});
export const industryKickoffSchema = z.object({
    event_type: z.string(),
    override_count: z.number(),
    scheduled_date: z.string(),
    override_status: z.string(),
    calculated_status: z.string(),
    override_status_author: z.string(),
});
export const skillsGrowthPlanOptionSchema = z.object({
    label: z.string(),
    value: z.string(),
});
export const strategySchema = z.object({
    label: z.string(),
    value: z.string(),
});
export const organization5Schema = z.object({
    id: z.number(),
    name: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    trial_type: z.string(),
    api_name: z.string(),
});
export const skillsByCategory4Schema = z.object({});
export const user2Schema = z.object({
    id: z.number(),
    email: z.string(),
    role: z.string(),
    full_name: z.string(),
});
export const stageSchema = z.object({
    id: z.number(),
    date: z.string(),
    notes: z.string().nullish(),
    round: z.number(),
    created_at: z.string(),
    interview_type: z.string(),
    company_id: z.number().nullish(),
    is_interview: z.boolean(),
    questions: z.array(questionSchema),
});
export const pipelineConnectionSchema = z.object({
    id: z.number(),
    channel: z.string(),
    user: userSchema,
    contact: contactSchema,
    created_at: z.string(),
    updated_at: z.string(),
    outreach_date: z.string(),
});
export const skillsByCategorySchema = z.object({
    very_comfortable: z.array(veryComfortableSchema),
});
export const creditCheckSchema = z.object({
    result: result2Schema,
    financing_options: z.array(z.string()),
    ssn_provided: z.boolean(),
});
export const skillsByCategory2Schema = z.object({
    very_comfortable: z.array(veryComfortable2Schema),
});
export const extFormSubmissionSchema = z.object({
    id: z.number().nullish(),
    data: dataSchema.nullish(),
});
export const fellowTaskSchema = z.object({
    id: z.number(),
    segment: z.string(),
    api_name: z.any(),
    body: z.string().nullish(),
    completed_at: z.string(),
    completion_status: z.string(),
    created_at: z.string(),
    start_date: z.any(),
    due_on: z.string(),
    onboarding: z.boolean(),
    syllabus: z.boolean(),
    priority_status: z.string(),
    hide_from_fellow: z.boolean(),
    note_id: z.any(),
    title: z.string(),
    template_id: z.number().nullish(),
    template_api_name: z.string().nullish(),
    weekly_check_in: z.boolean(),
    is_auto_created: z.boolean(),
    category: z.any(),
    non_completion_reason: z.any(),
    non_completion_explanation: z.any(),
    data: z.any(),
    resolved_at: z.string(),
    meeting_id: z.number().nullish(),
    completed_by: z.string(),
    fellow: fellow3Schema,
    creator: creator2Schema.nullish(),
});
export const skillsByCategory3Schema = z.object({
    very_comfortable: z.array(veryComfortable3Schema),
});
export const eventStatusSchema = z.object({
    fsm_call: fsmCallSchema,
    career_kickoff: careerKickoffSchema,
    industry_kickoff: industryKickoffSchema,
});
export const trialOwner2Schema = z.object({
    id: z.number(),
    avatar: z.string(),
    calendly_link: z.string(),
    email: z.string(),
    linkedin: z.any(),
    first_name: z.string(),
    last_name: z.string(),
    full_name: z.string(),
    job_title: z.any(),
    job_history: z.array(z.any()),
    job_roles: z.array(z.any()),
    industries: z.array(z.any()),
    organization: organization5Schema,
    role: z.string(),
    skills: z.array(z.any()),
    skills_by_category: skillsByCategory4Schema,
    summary: z.any(),
    track: z.any(),
    label: z.string(),
    value: z.number(),
});
export const appProcessSchema = z.object({
    archived_at: z.string().nullish(),
    company: companySchema,
    company_name: z.string(),
    created_at: z.string(),
    id: z.number(),
    interest: z.number().nullish(),
    is_remote: z.boolean().nullish(),
    job_application_context: z.string(),
    job_board: jobBoardSchema.nullish(),
    job_rec_id: z.number().nullish(),
    job_title: z.string(),
    job_url: z.string().nullish(),
    notes: z.string().nullish(),
    pipeline_connections: z.array(pipelineConnectionSchema),
    result: resultSchema.nullish(),
    sourced_job: z.any(),
    stages: z.array(stageSchema),
    status: z.string(),
    strategies: z.array(z.any()),
    updated_at: z.string(),
});
export const careerMentorSchema = z.object({
    id: z.number(),
    avatar: z.string(),
    calendly_link: z.string(),
    email: z.string(),
    linkedin: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    full_name: z.string(),
    job_title: z.string(),
    job_history: z.array(z.string()),
    job_roles: z.array(z.any()),
    industries: z.array(industrySchema),
    organization: organizationSchema,
    role: z.string(),
    skills: z.array(skillSchema),
    skills_by_category: skillsByCategorySchema,
    summary: z.string(),
    track: z.any(),
    label: z.string(),
    value: z.number(),
});
export const careerMentor2Schema = z.object({
    id: z.number(),
    avatar: z.string(),
    calendly_link: z.string(),
    email: z.string(),
    linkedin: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    full_name: z.string(),
    job_title: z.string(),
    job_history: z.array(z.string()),
    job_roles: z.array(z.any()),
    industries: z.array(industry2Schema),
    organization: organization2Schema,
    role: z.string(),
    skills: z.array(skill2Schema),
    skills_by_category: skillsByCategory2Schema,
    summary: z.string(),
    track: z.any(),
    label: z.string(),
    value: z.number(),
});
export const fellowNoteSchema = z.object({
    id: z.number(),
    body: z.string(),
    mixed_private_body: z.string(),
    mixed: z.boolean(),
    created_at: z.string(),
    fellow: fellow2Schema,
    creator: creatorSchema,
    date: z.string(),
    ext_form_submission: extFormSubmissionSchema,
    ext_form_submission_status: z.string().nullish(),
    ext_form_submission_completed_at: z.string().nullish(),
    meeting_id: z.number().nullish(),
    tasks: z.array(z.any()),
    template: z.string().nullish(),
    template_is_session: z.boolean(),
    was_session: z.boolean(),
    updated_at: z.string(),
    visible_to_fellow: z.boolean(),
    visible_for_all_mentors: z.boolean(),
    weekly_check_in: z.boolean(),
    week_two_check_in: z.boolean(),
    note_modules: z.array(z.string()),
    is_auto_created: z.boolean(),
    isPublished: z.boolean(),
    rePublish: z.boolean(),
    publishedStatus: z.string().nullish(),
    fellow_view_count: z.number(),
    completion_status: z.any(),
    embedded_attendance_reason: z.string(),
    embedded_fellow_reason: z.any(),
    embedded_reschedule_cancellation_details: z.any(),
    accountability_id: z.any(),
    accountability_reason: z.any(),
    canceled_accountability: z.boolean(),
    infraction_count: z.number(),
    warning_count: z.number(),
    session: sessionSchema,
    accountability_record_type: z.any(),
});
export const industryMentorSchema = z.object({
    id: z.number(),
    avatar: z.string(),
    calendly_link: z.string(),
    email: z.string(),
    linkedin: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    full_name: z.string(),
    job_title: z.string(),
    job_history: z.array(z.string()),
    job_roles: z.array(z.any()),
    industries: z.array(industry3Schema),
    organization: organization4Schema,
    role: z.string(),
    skills: z.array(skill3Schema),
    skills_by_category: skillsByCategory3Schema,
    summary: z.string(),
    track: z.any(),
    label: z.string(),
    value: z.number(),
});
export const programManager2Schema = z.object({
    id: z.number(),
    email: z.string(),
    avatar: avatarSchema,
    cohort_id: z.any(),
    role: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    drive_id: z.any(),
    created_at: z.string(),
    updated_at: z.string(),
    track: z.any(),
    summary: z.any(),
    core_advisor_id: z.any(),
    support_advisor_id: z.any(),
    calendar_link: z.string(),
    airtable_rec_id: z.string(),
    active_status: z.any(),
    opt_start_date: z.any(),
    on_discourse: z.boolean(),
    sfdc_contact_id: z.string(),
    sfdc_opportunity_id: z.any(),
    fellow_agreement_status: z.any(),
    isa_status: z.any(),
    about: z.any(),
    attendance_overrides: attendanceOverridesSchema,
    phone: z.any(),
    fellow_agreement_deadline: z.any(),
    work_authorization: z.any(),
    last_visited: z.string(),
    linkedin: z.any(),
    portfolio: z.any(),
    disabled: z.boolean(),
    skills_growth_plan: z.string(),
    gcalendar_id: z.string(),
    location: z.any(),
    accelerated_date: z.any(),
    break_start_date: z.any(),
    break_end_date: z.any(),
    payment_type: z.any(),
    trial_end_date: z.any(),
    withdrawal_request_date: z.any(),
    pathrise_end_date: z.any(),
    secondary_track: z.any(),
    test_user: z.boolean(),
    sfdc_advisor_owner: z.any(),
    addendums: z.array(z.any()),
    discourse_id: z.any(),
    discourse_last_seen_at: z.any(),
    intercom_id: z.string(),
    opportunity_type: z.any(),
    program_manager_id: z.any(),
    pronouns: z.any(),
    sfdc_scorecard_notes: z.any(),
    employee_manager_id: z.number(),
    job_title: z.any(),
    job_history: z.array(z.any()),
    enrollment_strategy: z.any(),
    anticipated_pathrise_end_date: z.any(),
    pathrise_start_date: z.any(),
    nps_updated_at: z.any(),
    program_duration: z.any(),
    event_status: eventStatusSchema,
    platform_access: z.string(),
    trial_owner_id: z.any(),
    organization_id: z.number(),
    break_length: z.any(),
    break_reason: z.any(),
    health_triage: z.any(),
    withdrawal_type: z.any(),
    withdrawal_reason: z.any(),
    withdrawal_context: z.any(),
    nps: z.any(),
    mia_notes: z.any(),
    mia_start_date: z.any(),
    payment_status: z.any(),
    price_name: z.any(),
    pdg_id: z.any(),
    onboard_email_sent: z.boolean(),
    accepted_terms: z.boolean(),
    leif_link: z.any(),
    viewed_offer_agreement: z.boolean(),
    role_type: z.any(),
    offer_flow_start_date: z.any(),
    pdg_slides_id: z.any(),
    leif_contract_id: z.any(),
    completed_trial_survey: z.any(),
    program_terms_of_service_id: z.any(),
    show_program_terms_of_service: z.boolean(),
    sfdc_user_id: z.string(),
    last_in_program_survey_completion_date: z.any(),
    placed_at: z.any(),
    pathrise_promoter: z.any(),
    subscription_tier_id: z.any(),
    employment_type: z.string(),
    began_career_at: z.any(),
    sms_phone: z.any(),
    degree_type: z.any(),
    degree_school: z.any(),
    degree_date: z.any(),
    job_search_plan_id: z.any(),
    job_search_owner_id: z.any(),
    abc_rating: z.any(),
    is_m2m: z.boolean(),
    hedwig_id: z.any(),
    copilot_last_visited: z.any(),
    streak_reset_at: z.any(),
    max_infraction_limit: z.number(),
    mia_end_date: z.any(),
    tap_status: z.any(),
    timezone: z.string(),
    program_phase_scope: z.string(),
    pte_conversion_date: z.any(),
    first_career_mentor_reassignment_date: z.any(),
    job_search_plan_accepted_at: z.any(),
    secondary_email: z.any(),
    job_search_plan_draft_id: z.any(),
    app_ready_status: z.string(),
    humanized_tracks: z.any(),
    calendly_type: z.any(),
    subscription_tier: z.any(),
});
export const fellowSchema = z.object({
    id: z.number(),
    about: z.any(),
    accelerated_date: z.any(),
    active_status: z.string(),
    addendums: z.array(z.any()),
    app_ready_status: z.string(),
    agreement_status: z.string(),
    anticipated_pathrise_end_date: z.string(),
    credit_check: creditCheckSchema,
    pte_flow: pteFlowSchema,
    job_search_plan_accepted_at: z.any(),
    show_program_terms_of_service: z.boolean(),
    analytics_type: z.string(),
    avatar: z.string(),
    can_schedule_session_one: z.boolean(),
    cohort: z.string(),
    show_extension_update_banner: z.boolean(),
    show_onboarding_quiz: z.boolean(),
    cohort_start_date: z.string(),
    cohort_drive_id: z.string(),
    created_at: z.string(),
    completed_session_one: z.boolean(),
    completed_trial_survey: z.string(),
    career_mentor: careerMentor2Schema,
    core_advisor: coreAdvisorSchema,
    daily_streak: z.number(),
    has_completed_onboarding_steps: z.boolean(),
    max_infraction_limit: z.number(),
    can_receive_infractions: z.boolean(),
    support_advisor: supportAdvisorSchema,
    job_search_owner: jobSearchOwnerSchema,
    drive_url: z.string(),
    job_search_plan_doc_url: z.any(),
    job_search_plan_draft_url: z.string(),
    drive_id: z.string(),
    program_terms_and_conditions_url: z.string(),
    email: z.string(),
    enrollment_strategy: z.string(),
    engagement_survey_id: z.number(),
    first_name: z.string(),
    last_name: z.string(),
    final_trial_end_date: z.string(),
    full_name: z.string(),
    has_converted: z.boolean(),
    has_not_received_infraction_today: z.boolean(),
    in_free_trial: z.boolean(),
    in_program_isa_overdue: z.boolean(),
    in_syllabus_beta: z.boolean(),
    in_soft_credit_check_beta: z.boolean(),
    isa_status: z.string(),
    leif_link: z.any(),
    last_visited: z.string(),
    linkedin: z.string(),
    location: z.any(),
    show_in_program_survey_banner: z.boolean(),
    offer_flow_active: z.any(),
    opportunity_type: z.string(),
    opt_start_date: z.any(),
    org_api_name: z.string(),
    organization: organization3Schema,
    payment_type: z.string(),
    pathrise_start_date: z.string(),
    pdg_id: z.any(),
    phone: z.string(),
    portfolio: z.any(),
    price_name: z.string(),
    subscription_tier: subscriptionTierSchema,
    remaining_credits: z.number(),
    pending_credits: z.number(),
    program_manager: programManagerSchema,
    pronouns: z.any(),
    scheduled_session_one: z.boolean(),
    scheduled_session_two: z.boolean(),
    secondary_track: z.any(),
    settings: z.array(settingSchema),
    job_preferences: z.array(z.any()),
    role: z.string(),
    sfdc_opportunity_id: z.string(),
    sfdc_scorecard_notes: z.string(),
    show_chat_engagement_survey: z.boolean(),
    show_trial_survey: z.boolean(),
    skills_growth_plan: z.string(),
    skills_rating: z.any(),
    summary: z.any(),
    survey_default_params: surveyDefaultParamsSchema,
    tap_status: z.any(),
    test_user: z.boolean(),
    timezone: z.string(),
    pte_flow_started_at: z.string(),
    track: z.string(),
    challenge: z.string(),
    trial_end_date: z.string(),
    trial_owner: trialOwnerSchema,
    viewed_offer_agreement: z.boolean(),
    work_authorization: z.string(),
    workshops_required: z.boolean(),
    label: z.string(),
    value: z.number(),
    abc_rating: z.any(),
    qualified_placement_count: z.number(),
});
export const rootSchema = z.object({
    appProcesses: z.array(appProcessSchema),
    careerMentor: careerMentorSchema,
    fellow: fellowSchema,
    fellowNotes: z.array(fellowNoteSchema),
    fellowTasks: z.array(fellowTaskSchema),
    infractionCategories: z.array(infractionCategorySchema),
    industryMentor: industryMentorSchema,
    jobBoards: z.array(jobBoard2Schema),
    programManager: programManager2Schema,
    skillsGrowthPlanOptions: z.array(skillsGrowthPlanOptionSchema),
    strategies: z.array(strategySchema),
    trialOwner: trialOwner2Schema,
    user: user2Schema,
    scheduleEvents: z.any(),
});
//# sourceMappingURL=index.js.map